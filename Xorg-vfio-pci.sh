#!/bin/bash

# Dir:      /usr/sbin/Xorg-vfio-pci.sh
# Description:  Generates Xorg for first available VGA device.

# set IFS #
SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
IFS=$'\n'      # Change IFS to newline char
#

# parameters #
bool_invalidVGA=false
str_thisVGABusID=""
str_thisVGADriver=""
#

# set file #
#str_file1="/var/log/lspci-k.log"
#lspci -k > $str_file1
declare -a arr_file1=`lspci -k`
str_file2="/etc/X11/xorg.conf.d/10-Xorg-vfio-pci.conf"
#

# find external PCI device Index values, Bus ID, and drivers #
bool_parseVGA=false
declare -i int_index=0  # reset counter
#

# parse list of PCI devices #
#while read -r str_line; do
for str_line in $arr_file1; do

    if [[ $str_line == *"VGA"* && $str_line != *"Subsystem: "* && $str_line != *"Kernel driver in use: "* && $str_line != *"Kernel modules: "* ]]; then     # line includes PCI bus ID

        ((int_index++))                     # increment only if Bus ID is found
        str_thisVGABusID=(${str_line:0:7})  # raw VGA Bus ID
        # ab:cd.e > b:d:e
        str_thisVGABusID=${str_thisVGABusID:1:2}${str_thisVGABusID:4:3}                                             # ab:cd.e   > b:d.e
        str_thisVGABusID=$(echo $str_thisVGABusID | cut -d '.' -f 1)":"$(echo $str_thisVGABusID | cut -d '.' -f 2)  # b:d.e     > b:d:e
        bool_parseVGA=true

    fi

    # save only if driver is found #
    if [[ $bool_parseVGA == true && $str_line == *"Kernel driver in use: "* ]]; then      # line includes PCI driver

        declare -i int_offset=${#str_line}-22
        str_thisVGADriver=${str_line:23:$int_offset}     # VGA Driver

        # save only if not vfio-pci #
        if [[ $str_thisVGADriver != *"vfio-pci"* ]]; then break;  
        else $str_thisVGADriver=""; fi
        #

    fi
    #

#done < $str_file1
done
#

# if no VGA device is found, do not write to file normally #
if [[ -z $str_thisVGABusID || -z $str_thisVGADriver ]]; then bool_invalidVGA=true;
else bool_invalidVGA=false; fi
#

# set Xorg file #
if [[ $bool_invalidVGA == false ]]; then

    declare -a arr_XorgConf=("
# Xorg conf generated by Xorg-vfio-pci.service #

Section \"Device\"
Identifier     \"Device0\"
Driver         \"$str_thisVGADriver\"
BusID          \"PCI:$str_thisVGABusID\"
EndSection")

else
    declare -a arr_XorgConf=(`
# Xorg conf generated by Xorg-vfio-pci.service #
# WARNING: no VGA device found! Restart Xorg-vfio-pci.service and Display Manager.
# Execute \"lspci -k\" for Bus ID and Driver.

#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"driver_name\"
#BusID          \"PCI:x:x:x\"
#EndSection
`)
fi
#

# write to Xorg #
if [[ ! -z $str_file2 ]]; then sudo rm $str_file2; fi
for str_line in $arr_XorgConf; do echo $str_line >> $str_file2; done
#

# find display manager #
str_DM=`cat /etc/X11/default-display-manager`
str_DM=${str_DM:9:(${#str_DM}-9)}
str_DM=`echo $str_DM | tr '[:upper:]' '[:lower:]'`
#

# restart service #
str_input=`echo $1 | tr '[:upper:]' '[:lower:]'`
if [[ $1 == "dm" && ! -z $str_DM ]]; then
    sudo systemctl enable $str_DM
    sudo systemctl restart $str_DM
fi
#

# reset IFS ##
IFS=$SAVEIFS   # Restore original IFS
#

exit 0
